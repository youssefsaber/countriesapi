{"version":3,"sources":["components/Country.js","components/CountriesList.js","App.js","serviceWorker.js","index.js"],"names":["Country","_ref","country","react_default","a","createElement","List","Item","style","textAlign","margin","Image","avatar","src","flag","Content","Header","name","Description","region","CountriesList","countries","length","horizontal","map","components_Country","key","styles","container","paddingTop","App","_useState","useState","_useState2","Object","slicedToArray","setCountries","_useState3","_useState4","allCountries","setAllCountries","useEffect","fetch","then","response","json","Array","isArray","Input","placeholder","icon","onInput","input","target","value","filter","toLowerCase","includes","Container","text","components_CountriesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAceA,EAXC,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAKC,KAAN,CAAWC,MAAO,CAAEC,UAAW,OAAQC,OAAQ,KAC7CP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,QAAM,EAACC,IAAKX,EAAQY,OAC3BX,EAAAC,EAAAC,cAACC,EAAA,EAAKS,QAAN,KACEZ,EAAAC,EAAAC,cAACC,EAAA,EAAKU,OAAN,KAAcd,EAAQe,MACtBd,EAAAC,EAAAC,cAACC,EAAA,EAAKY,YAAN,KACGhB,EAAQiB,WCIJC,EATO,SAAAnB,GAAmB,IAAhBoB,EAAgBpB,EAAhBoB,UACrB,OAAyB,IAArBA,EAAUC,OAAqBnB,EAAAC,EAAAC,cAAA,gDAE/BF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMiB,YAAU,GACXF,EAAUG,IAAI,SAAAtB,GAAO,OAAIC,EAAAC,EAAAC,cAACoB,EAAD,CAASC,IAAKxB,EAAQe,KAAMf,QAASA,0BCqCrEyB,EAAS,CACbC,UAAW,CACTnB,UAAY,SACZoB,WAAa,KAGAC,EA9CL,WAAM,IAAAC,EAEkBC,mBAAS,IAF3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETV,EAFSY,EAAA,GAEEG,EAFFH,EAAA,GAAAI,EAGwBL,mBAAS,IAHjCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGTE,EAHSD,EAAA,GAGKE,EAHLF,EAAA,GAyBhBG,oBAAU,WAnBDC,MAAM,wCACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAtB,GAAS,OAAGyB,MAAMC,QAAQ1B,GAAaA,EAAY,KACxDsB,KAAK,SAAAtB,GACJmB,EAAgBnB,GAChBe,EAAaf,MAgBhB,IAID,OACElB,EAAAC,EAAAC,cAAA,OAAKG,MAAOmB,EAAOC,WACjBzB,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,YAAY,mBAAmBC,KAAK,SAASC,QAJtC,SAAAC,GAAK,OAPDnC,EAOqBmC,EAAMC,OAAOC,MAP1BlB,EAAaG,EAAagB,OAAO,SAAArD,GAAO,OAAEA,EAAQe,KAAKuC,cAAcC,SAASxC,EAAKuC,kBAA3F,IAAAvC,KAYlBd,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAWC,MAAI,GACbxD,EAAAC,EAAAC,cAACuD,EAAD,CAAevC,UAAWA,OC5BhBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.b2c3c077.chunk.js","sourcesContent":["import React from 'react'\nimport { Image, List } from 'semantic-ui-react'\n\nconst Country = ({country}) => (\n    <List.Item style={{ textAlign: 'left', margin: 20 }}>\n      <Image avatar src={country.flag} />\n      <List.Content>\n        <List.Header>{country.name}</List.Header>\n        <List.Description>\n          {country.region}\n        </List.Description>\n      </List.Content>\n    </List.Item>\n)\nexport default Country;\n","import React from 'react'\nimport { List } from 'semantic-ui-react'\nimport Country from './Country';\n\nconst CountriesList = ( {countries} ) => {\n    if (countries.length === 0) return <h3>there is no results for this query</h3>;\n    return (\n        <List horizontal>\n            {countries.map(country => <Country key={country.name} country={country} />)}\n        </List>\n    )\n}\n\nexport default CountriesList","import React, { useEffect, useState } from 'react';\nimport CountriesList from './components/CountriesList'\nimport { Container } from 'semantic-ui-react'\nimport { Input } from 'semantic-ui-react'\n\nconst App = () => {\n  \n  const [countries, setCountries] = useState([]);\n  const [allCountries, setAllCountries] = useState([]);\n\n  const getAllCountries = () => {\n    return fetch('https://restcountries.eu/rest/v2/all')\n      .then(response => response.json())\n      .then(countries=> Array.isArray(countries) ? countries : [])\n      .then(countries=> {\n        setAllCountries(countries);\n        setCountries(countries)\n      })\n  }\n\n  const getCountriesByName = (name) => {\n    return fetch(`https://restcountries.eu/rest/v2/name/${name}`)\n      .then(response => response.json())\n      .then(countries=> Array.isArray(countries) ? countries : [])\n      .then(setCountries)\n  }\n\n  const filterCountries = name => setCountries(allCountries.filter(country=>country.name.toLowerCase().includes(name.toLowerCase())))\n\n\n  useEffect(() => {\n    getAllCountries();\n  }, []);\n\n  const handelInput = input => filterCountries(input.target.value);\n  \n    return (\n      <div style={styles.container}>\n        <Input placeholder=\"Search Countries\" icon='search' onInput={handelInput} />\n        <Container text>\n          <CountriesList countries={countries} />\n        </Container>\n      </div>\n    );\n  }\nconst styles = {\n  container: {\n    textAlign : 'center',\n    paddingTop : 20,\n  },\n}\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}